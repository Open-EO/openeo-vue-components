{
  "id": "wms-a3cca9",
  "title": "NDVI based on Sentinel 2",
  "description": "Deriving minimum NDVI measurements over pixel time series of Sentinel 2",
  "url": "https://example.openeo.org/wms/wms-a3cca9",
  "type": "wms",
  "enabled": true,
  "process": {
    "id": "ndvi",
    "process_graph": {
      "dc": {
        "process_id": "load_collection",
        "arguments": {
          "id": "Sentinel-2",
          "spatial_extent": {
            "west": 16.1,
            "east": 16.6,
            "north": 48.6,
            "south": 47.2
          },
          "temporal_extent": [
            "2018-01-01",
            "2018-02-01"
          ]
        }
      },
      "bands": {
        "process_id": "filter_bands",
        "description": "Filter and order the bands. The order is important for the following reduce operation.",
        "arguments": {
          "data": {
            "from_node": "dc"
          },
          "bands": [
            "B08",
            "B04",
            "B02"
          ]
        }
      },
      "evi": {
        "process_id": "reduce",
        "description": "Compute the EVI. Formula: 2.5 * (NIR - RED) / (1 + NIR + 6*RED + -7.5*BLUE)",
        "arguments": {
          "data": {
            "from_node": "bands"
          },
          "dimension": "bands",
          "reducer": {
            "process_graph": {
              "nir": {
                "process_id": "array_element",
                "arguments": {
                  "data": {
                    "from_parameter": "data"
                  },
                  "index": 0
                }
              },
              "red": {
                "process_id": "array_element",
                "arguments": {
                  "data": {
                    "from_parameter": "data"
                  },
                  "index": 1
                }
              },
              "blue": {
                "process_id": "array_element",
                "arguments": {
                  "data": {
                    "from_parameter": "data"
                  },
                  "index": 2
                }
              },
              "sub": {
                "process_id": "subtract",
                "arguments": {
                  "data": [
                    {
                      "from_node": "nir"
                    },
                    {
                      "from_node": "red"
                    }
                  ]
                }
              },
              "p1": {
                "process_id": "product",
                "arguments": {
                  "data": [
                    6,
                    {
                      "from_node": "red"
                    }
                  ]
                }
              },
              "p2": {
                "process_id": "product",
                "arguments": {
                  "data": [
                    -7.5,
                    {
                      "from_node": "blue"
                    }
                  ]
                }
              },
              "sum": {
                "process_id": "sum",
                "arguments": {
                  "data": [
                    1,
                    {
                      "from_node": "nir"
                    },
                    {
                      "from_node": "p1"
                    },
                    {
                      "from_node": "p2"
                    }
                  ]
                }
              },
              "div": {
                "process_id": "divide",
                "arguments": {
                  "data": [
                    {
                      "from_node": "sub"
                    },
                    {
                      "from_node": "sum"
                    }
                  ]
                }
              },
              "p3": {
                "process_id": "product",
                "arguments": {
                  "data": [
                    2.5,
                    {
                      "from_node": "div"
                    }
                  ]
                },
                "result": true
              }
            }
          }
        }
      },
      "mintime": {
        "process_id": "reduce",
        "description": "Compute a minimum time composite by reducing the temporal dimension",
        "arguments": {
          "data": {
            "from_node": "evi"
          },
          "dimension": "temporal",
          "reducer": {
            "process_graph": {
              "min": {
                "process_id": "min",
                "arguments": {
                  "data": {
                    "from_parameter": "data"
                  }
                },
                "result": true
              }
            }
          }
        }
      },
      "save": {
        "process_id": "save_result",
        "arguments": {
          "data": {
            "from_node": "mintime"
          },
          "format": "GTiff"
        },
        "result": true
      }
    }
  },
  "configuration": {
    "version": "1.3.0"
  },
  "attributes": {
    "layers": [
      "ndvi",
      "evi"
    ]
  },
  "created": "2017-01-01T09:32:12Z",
  "plan": "free",
  "costs": 12.98,
  "budget": 100
}